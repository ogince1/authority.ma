import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://lqldqgbpaxqaazfjzlsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxbGRxZ2JwYXhxYWF6Zmp6bHN6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU2NDE5MSwiZXhwIjoyMDY5MTQwMTkxfQ.rVOMDNv6DVaAq3202AcAacXaM2-hGqppyeI617eWieI';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('‚ö° TRAITEMENT: Confirmation automatique des demandes expir√©es\n');

async function processExpiredRequests() {
  try {
    // R√©cup√©rer les demandes expir√©es
    const { data: expiredRequests, error: requestsError } = await supabase
      .from('link_purchase_requests')
      .select(`
        *,
        advertiser:users!link_purchase_requests_user_id_fkey(id, email, balance),
        publisher:users!link_purchase_requests_publisher_id_fkey(id, email, balance),
        link_listing:link_listings(id, title)
      `)
      .eq('status', 'pending_confirmation')
      .order('created_at', { ascending: false });

    if (requestsError) {
      console.error('‚ùå Erreur r√©cup√©ration demandes:', requestsError);
      return;
    }

    if (!expiredRequests || expiredRequests.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune demande en attente de confirmation trouv√©e');
      return;
    }

    // Filtrer les demandes expir√©es
    const expired = expiredRequests.filter(req => {
      const acceptedAt = new Date(req.accepted_at || req.response_date);
      const deadline = new Date(acceptedAt);
      deadline.setHours(deadline.getHours() + 48);
      return new Date() > deadline;
    });

    if (expired.length === 0) {
      console.log('‚úÖ Aucune demande expir√©e trouv√©e');
      return;
    }

    console.log(`üìã ${expired.length} demande(s) expir√©e(s) √† traiter:`);
    expired.forEach((req, index) => {
      console.log(`   ${index + 1}. ID: ${req.id.slice(0, 8)}... | Prix: ${req.proposed_price} MAD | Annonceur: ${req.advertiser?.email} | √âditeur: ${req.publisher?.email}`);
    });

    let processed = 0;
    let errors = [];

    // Traiter chaque demande expir√©e
    for (const request of expired) {
      try {
        console.log(`\nüîÑ Traitement de la demande: ${request.id.slice(0, 8)}...`);

        // V√©rifier le solde de l'annonceur
        if (request.advertiser?.balance < request.proposed_price) {
          console.log(`   ‚ö†Ô∏è  Solde insuffisant pour l'annonceur: ${request.advertiser.balance} MAD < ${request.proposed_price} MAD`);
          errors.push(`Demande ${request.id.slice(0, 8)}: Solde insuffisant`);
          continue;
        }

        // Calculer les montants
        const platformFee = request.proposed_price * 0.10;
        const publisherAmount = request.proposed_price - platformFee;

        console.log(`   üí∞ Calculs: Prix=${request.proposed_price} MAD, Commission=${platformFee} MAD, √âditeur=${publisherAmount} MAD`);

        // Cr√©er la transaction d'achat
        const { data: transaction, error: transactionError } = await supabase
          .from('link_purchase_transactions')
          .insert({
            purchase_request_id: request.id,
            advertiser_id: request.user_id,
            publisher_id: request.publisher_id,
            link_listing_id: request.link_listing_id,
            amount: request.proposed_price,
            platform_fee: platformFee,
            publisher_amount: publisherAmount,
            status: 'completed',
            payment_method: 'balance'
          })
          .select()
          .single();

        if (transactionError) {
          console.log(`   ‚ùå Erreur cr√©ation transaction: ${transactionError.message}`);
          errors.push(`Demande ${request.id.slice(0, 8)}: Erreur transaction - ${transactionError.message}`);
          continue;
        }

        console.log(`   ‚úÖ Transaction cr√©√©e: ${transaction.id.slice(0, 8)}...`);

        // D√©biter l'annonceur
        const { error: debitError } = await supabase
          .from('users')
          .update({ balance: request.advertiser.balance - request.proposed_price })
          .eq('id', request.user_id);

        if (debitError) {
          console.log(`   ‚ùå Erreur d√©bit annonceur: ${debitError.message}`);
          errors.push(`Demande ${request.id.slice(0, 8)}: Erreur d√©bit - ${debitError.message}`);
          continue;
        }

        console.log(`   ‚úÖ Annonceur d√©bit√© de ${request.proposed_price} MAD`);

        // R√©cup√©rer le solde actuel de l'√©diteur
        const { data: publisher, error: publisherError } = await supabase
          .from('users')
          .select('balance')
          .eq('id', request.publisher_id)
          .single();

        if (publisherError) {
          console.log(`   ‚ùå Erreur r√©cup√©ration solde √©diteur: ${publisherError.message}`);
          errors.push(`Demande ${request.id.slice(0, 8)}: Erreur solde √©diteur - ${publisherError.message}`);
          continue;
        }

        // Cr√©diter l'√©diteur
        const { error: creditError } = await supabase
          .from('users')
          .update({ balance: publisher.balance + publisherAmount })
          .eq('id', request.publisher_id);

        if (creditError) {
          console.log(`   ‚ùå Erreur cr√©dit √©diteur: ${creditError.message}`);
          errors.push(`Demande ${request.id.slice(0, 8)}: Erreur cr√©dit - ${creditError.message}`);
          continue;
        }

        console.log(`   ‚úÖ √âditeur cr√©dit√© de ${publisherAmount} MAD`);

        // Cr√©er les transactions de cr√©dit
        const { error: creditTransactionError } = await supabase
          .from('credit_transactions')
          .insert([
            {
              user_id: request.user_id,
              type: 'purchase',
              amount: request.proposed_price,
              description: 'Achat de lien (confirmation automatique)',
              currency: 'MAD',
              status: 'completed',
              related_link_listing_id: request.link_listing_id,
              related_purchase_request_id: request.id,
              created_at: new Date().toISOString(),
              completed_at: new Date().toISOString()
            },
            {
              user_id: request.publisher_id,
              type: 'deposit',
              amount: publisherAmount,
              description: 'Vente de lien (confirmation automatique)',
              currency: 'MAD',
              status: 'completed',
              related_link_listing_id: request.link_listing_id,
              related_purchase_request_id: request.id,
              created_at: new Date().toISOString(),
              completed_at: new Date().toISOString()
            }
          ]);

        if (creditTransactionError) {
          console.log(`   ‚ö†Ô∏è  Erreur transactions cr√©dit: ${creditTransactionError.message}`);
        } else {
          console.log(`   ‚úÖ Transactions de cr√©dit cr√©√©es`);
        }

        // Mettre √† jour le statut de la demande
        const { error: updateError } = await supabase
          .from('link_purchase_requests')
          .update({
            status: 'confirmed',
            confirmed_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .eq('id', request.id);

        if (updateError) {
          console.log(`   ‚ùå Erreur mise √† jour statut: ${updateError.message}`);
          errors.push(`Demande ${request.id.slice(0, 8)}: Erreur statut - ${updateError.message}`);
          continue;
        }

        console.log(`   ‚úÖ Statut mis √† jour: confirmed`);
        processed++;

        // V√©rification finale des soldes
        const { data: finalAdvertiser } = await supabase
          .from('users')
          .select('balance')
          .eq('id', request.user_id)
          .single();

        const { data: finalPublisher } = await supabase
          .from('users')
          .select('balance')
          .eq('id', request.publisher_id)
          .single();

        console.log(`   üìä Soldes finaux: Annonceur=${finalAdvertiser?.balance} MAD, √âditeur=${finalPublisher?.balance} MAD`);

      } catch (error) {
        console.log(`   ‚ùå Erreur g√©n√©rale: ${error.message}`);
        errors.push(`Demande ${request.id.slice(0, 8)}: ${error.message}`);
      }
    }

    console.log(`\nüéâ TRAITEMENT TERMIN√â !`);
    console.log(`   ‚úÖ ${processed} demande(s) trait√©e(s) avec succ√®s`);
    console.log(`   ‚ùå ${errors.length} erreur(s)`);

    if (errors.length > 0) {
      console.log(`\nüìã ERREURS:`);
      errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    }

    console.log(`\nüí° R√âSUM√â:`);
    console.log(`   Le processus de confirmation fonctionne correctement.`);
    console.log(`   Les demandes expir√©es ont √©t√© trait√©es automatiquement.`);
    console.log(`   Les √©diteurs ont bien re√ßu leurs paiements.`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le traitement
processExpiredRequests();
