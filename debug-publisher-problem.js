import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://lqldqgbpaxqaazfjzlsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxbGRxZ2JwYXhxYWF6Zmp6bHN6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU2NDE5MSwiZXhwIjoyMDY5MTQwMTkxfQ.rVOMDNv6DVaAq3202AcAacXaM2-hGqppyeI617eWieI';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç DEBUG: Probl√®me sp√©cifique de l\'√©diteur\n');

async function debugPublisherProblem() {
  try {
    // R√©cup√©rer les utilisateurs
    const { data: advertiser } = await supabase
      .from('users')
      .select('id, email, balance, updated_at')
      .eq('email', 'abderrahimmolatefpro@gmail.com')
      .single();

    const { data: publisher } = await supabase
      .from('users')
      .select('id, email, balance, updated_at')
      .eq('email', 'ogincema@gmail.com')
      .single();

    console.log(`üìä SOLDES ACTUELS:`);
    console.log(`   Annonceur: ${advertiser?.balance} MAD (${new Date(advertiser?.updated_at).toLocaleString()})`);
    console.log(`   √âditeur: ${publisher?.balance} MAD (${new Date(publisher?.updated_at).toLocaleString()})`);

    // V√©rifier les transactions r√©centes de cr√©dit
    console.log('\nüìã TRANSACTIONS DE CR√âDIT R√âCENTES:');
    
    const { data: recentTransactions } = await supabase
      .from('credit_transactions')
      .select('*')
      .or(`user_id.eq.${advertiser?.id},user_id.eq.${publisher?.id}`)
      .order('created_at', { ascending: false })
      .limit(6);

    console.log(`   ${recentTransactions?.length || 0} transactions trouv√©es:`);
    recentTransactions?.forEach((trans, index) => {
      const userType = trans.user_id === advertiser?.id ? 'Annonceur' : '√âditeur';
      console.log(`   ${index + 1}. ${userType}: ${trans.type} ${trans.amount} MAD`);
      console.log(`      Balance before: ${trans.balance_before} MAD`);
      console.log(`      Balance after: ${trans.balance_after} MAD`);
      console.log(`      Created: ${new Date(trans.created_at).toLocaleString()}`);
      console.log(`      Description: ${trans.description}`);
    });

    // Analyser la derni√®re transaction de l'√©diteur
    const publisherTransactions = recentTransactions?.filter(t => t.user_id === publisher?.id);
    
    if (publisherTransactions && publisherTransactions.length > 0) {
      const lastPublisherTransaction = publisherTransactions[0];
      
      console.log(`\nüîç ANALYSE DE LA DERNI√àRE TRANSACTION √âDITEUR:`);
      console.log(`   Transaction ID: ${lastPublisherTransaction.id}`);
      console.log(`   Type: ${lastPublisherTransaction.type}`);
      console.log(`   Montant: ${lastPublisherTransaction.amount} MAD`);
      console.log(`   Balance before: ${lastPublisherTransaction.balance_before} MAD`);
      console.log(`   Balance after: ${lastPublisherTransaction.balance_after} MAD`);
      console.log(`   Balance actuelle dans users: ${publisher?.balance} MAD`);
      
      if (publisher?.balance === lastPublisherTransaction.balance_after) {
        console.log(`   ‚úÖ COH√âRENT: Balance users = Balance_after transaction`);
      } else {
        console.log(`   ‚ùå INCOH√âRENT: Balance users ‚â† Balance_after transaction`);
        console.log(`   Diff√©rence: ${Math.abs((publisher?.balance || 0) - lastPublisherTransaction.balance_after)} MAD`);
      }
    }

    // V√©rifier s'il y a une transaction de 20 MAD r√©cente
    console.log(`\nüîç RECHERCHE DE LA TRANSACTION DE 20 MAD:`);
    
    const { data: recentPurchases } = await supabase
      .from('link_purchase_requests')
      .select('*')
      .eq('proposed_price', 20)
      .eq('status', 'confirmed')
      .order('confirmed_at', { ascending: false })
      .limit(3);

    console.log(`   ${recentPurchases?.length || 0} demandes de 20 MAD confirm√©es:`);
    recentPurchases?.forEach((req, index) => {
      console.log(`   ${index + 1}. Demande ID: ${req.id.slice(0, 8)}...`);
      console.log(`      Prix: ${req.proposed_price} MAD`);
      console.log(`      Confirm√©e: ${new Date(req.confirmed_at).toLocaleString()}`);
      console.log(`      Annonceur: ${req.user_id === advertiser?.id ? 'OUI' : 'NON'}`);
      console.log(`      √âditeur: ${req.publisher_id === publisher?.id ? 'OUI' : 'NON'}`);
    });

    // V√©rifier les transactions de cr√©dit li√©es √† cette demande
    if (recentPurchases && recentPurchases.length > 0) {
      const lastPurchase = recentPurchases[0];
      
      console.log(`\nüîç TRANSACTIONS DE CR√âDIT LI√âES √Ä LA DEMANDE ${lastPurchase.id.slice(0, 8)}...:`);
      
      const { data: relatedTransactions } = await supabase
        .from('credit_transactions')
        .select('*')
        .eq('related_purchase_request_id', lastPurchase.id)
        .order('created_at', { ascending: false });

      console.log(`   ${relatedTransactions?.length || 0} transactions li√©es:`);
      relatedTransactions?.forEach((trans, index) => {
        const userType = trans.user_id === advertiser?.id ? 'Annonceur' : '√âditeur';
        console.log(`   ${index + 1}. ${userType}: ${trans.type} ${trans.amount} MAD`);
        console.log(`      Balance before: ${trans.balance_before} MAD`);
        console.log(`      Balance after: ${trans.balance_after} MAD`);
        console.log(`      Created: ${new Date(trans.created_at).toLocaleString()}`);
      });

      // V√©rifier si la transaction de l'√©diteur existe
      const publisherCreditTransaction = relatedTransactions?.find(t => 
        t.user_id === publisher?.id && t.type === 'deposit'
      );

      if (publisherCreditTransaction) {
        console.log(`\n‚úÖ TRANSACTION √âDITEUR TROUV√âE:`);
        console.log(`   Montant: ${publisherCreditTransaction.amount} MAD`);
        console.log(`   Balance after: ${publisherCreditTransaction.balance_after} MAD`);
        console.log(`   Balance actuelle: ${publisher?.balance} MAD`);
        
        if (publisher?.balance !== publisherCreditTransaction.balance_after) {
          console.log(`   ‚ùå PROBL√àME: Le trigger n'a pas mis √† jour la table users !`);
        } else {
          console.log(`   ‚úÖ OK: Le trigger a fonctionn√©`);
        }
      } else {
        console.log(`\n‚ùå TRANSACTION √âDITEUR NON TROUV√âE !`);
        console.log(`   La transaction de cr√©dit pour l'√©diteur n'existe pas !`);
      }
    }

    console.log(`\nüéØ DIAGNOSTIC:`);
    console.log(`   Si l'annonceur est d√©bit√© mais l'√©diteur pas cr√©dit√©:`);
    console.log(`   1. La transaction de cr√©dit de l'√©diteur n'est pas cr√©√©e`);
    console.log(`   2. La transaction est cr√©√©e mais le trigger ne fonctionne pas`);
    console.log(`   3. Il y a une erreur dans la logique de confirmation`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le diagnostic
debugPublisherProblem();
