import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://lqldqgbpaxqaazfjzlsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxbGRxZ2JwYXhxYWF6Zmp6bHN6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU2NDE5MSwiZXhwIjoyMDY5MTQwMTkxfQ.rVOMDNv6DVaAq3202AcAacXaM2-hGqppyeI617eWieI';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç DEBUG: Analyse compl√®te du probl√®me de mise √† jour du balance\n');

async function debugBalanceUpdate() {
  try {
    // √âTAPE 1: V√©rifier les triggers existants
    console.log('üìã √âTAPE 1: V√©rification des triggers existants...');
    
    // V√©rifier si les triggers existent via une requ√™te SQL directe
    const { data: triggers, error: triggerError } = await supabase
      .from('information_schema.triggers')
      .select('*')
      .eq('event_object_table', 'credit_transactions');

    if (triggerError) {
      console.log('‚ùå Erreur r√©cup√©ration triggers:', triggerError);
    } else {
      console.log(`‚úÖ Triggers trouv√©s: ${triggers?.length || 0}`);
      triggers?.forEach((trigger, index) => {
        console.log(`   ${index + 1}. ${trigger.trigger_name} (${trigger.event_manipulation})`);
      });
    }

    // √âTAPE 2: V√©rifier les fonctions de trigger
    console.log('\nüìã √âTAPE 2: V√©rification des fonctions de trigger...');
    
    const { data: functions, error: funcError } = await supabase
      .from('information_schema.routines')
      .select('*')
      .eq('routine_name', 'update_user_balance_after_transaction');

    if (funcError) {
      console.log('‚ùå Erreur r√©cup√©ration fonctions:', funcError);
    } else {
      console.log(`‚úÖ Fonctions trouv√©es: ${functions?.length || 0}`);
      functions?.forEach((func, index) => {
        console.log(`   ${index + 1}. ${func.routine_name} (${func.routine_type})`);
      });
    }

    // √âTAPE 3: Test direct avec une transaction simple
    console.log('\nüìã √âTAPE 3: Test direct avec une transaction simple...');
    
    // R√©cup√©rer un utilisateur de test
    const { data: testUser, error: userError } = await supabase
      .from('users')
      .select('id, email, balance, updated_at')
      .eq('email', 'ogincema@gmail.com')
      .single();

    if (userError || !testUser) {
      console.log('‚ùå Impossible de trouver l\'utilisateur de test');
      return;
    }

    console.log(`üéØ Utilisateur de test: ${testUser.email}`);
    console.log(`   Solde avant: ${testUser.balance} MAD`);
    console.log(`   Derni√®re mise √† jour: ${new Date(testUser.updated_at).toLocaleString()}`);

    // Cr√©er une transaction de test SIMPLE
    const testAmount = 1;
    const { data: testTransaction, error: testError } = await supabase
      .from('credit_transactions')
      .insert({
        user_id: testUser.id,
        type: 'deposit',
        amount: testAmount,
        description: 'Test debug balance',
        currency: 'MAD',
        status: 'completed',
        balance_before: testUser.balance,
        balance_after: testUser.balance + testAmount,
        created_at: new Date().toISOString(),
        completed_at: new Date().toISOString()
      })
      .select()
      .single();

    if (testError) {
      console.log('‚ùå Erreur cr√©ation transaction de test:', testError);
      console.log('   Code:', testError.code);
      console.log('   Message:', testError.message);
      console.log('   D√©tails:', testError.details);
      return;
    }

    console.log(`‚úÖ Transaction de test cr√©√©e: ${testTransaction.id.slice(0, 8)}...`);
    console.log(`   Balance before: ${testTransaction.balance_before} MAD`);
    console.log(`   Balance after: ${testTransaction.balance_after} MAD`);

    // Attendre que le trigger se d√©clenche
    console.log('\n‚è≥ Attente de 5 secondes pour que le trigger se d√©clenche...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // V√©rifier si le solde a √©t√© mis √† jour
    const { data: updatedUser, error: updateError } = await supabase
      .from('users')
      .select('balance, updated_at')
      .eq('id', testUser.id)
      .single();

    if (updateError) {
      console.log('‚ùå Erreur v√©rification solde mis √† jour:', updateError);
      return;
    }

    console.log(`\nüìä R√âSULTATS DU TEST:`);
    console.log(`   Solde avant: ${testUser.balance} MAD`);
    console.log(`   Solde apr√®s: ${updatedUser.balance} MAD`);
    console.log(`   Attendu: ${testUser.balance + testAmount} MAD`);
    console.log(`   Derni√®re mise √† jour: ${new Date(updatedUser.updated_at).toLocaleString()}`);

    if (updatedUser.balance === testUser.balance + testAmount) {
      console.log(`   ‚úÖ TRIGGER FONCTIONNE !`);
    } else {
      console.log(`   ‚ùå TRIGGER NE FONCTIONNE PAS !`);
      console.log(`   Diff√©rence: ${Math.abs(updatedUser.balance - (testUser.balance + testAmount))} MAD`);
    }

    // √âTAPE 4: V√©rifier les logs d'erreur de Supabase
    console.log('\nüìã √âTAPE 4: V√©rification des logs d\'erreur...');
    
    // Essayer de r√©cup√©rer les logs r√©cents (si accessible)
    const { data: logs, error: logError } = await supabase
      .from('pg_stat_statements')
      .select('*')
      .limit(5);

    if (logError) {
      console.log('‚ùå Logs non accessibles:', logError.message);
    } else {
      console.log(`‚úÖ Logs r√©cup√©r√©s: ${logs?.length || 0} entr√©es`);
    }

    // √âTAPE 5: V√©rifier les politiques RLS
    console.log('\nüìã √âTAPE 5: V√©rification des politiques RLS...');
    
    const { data: policies, error: policyError } = await supabase
      .from('information_schema.table_privileges')
      .select('*')
      .eq('table_name', 'users');

    if (policyError) {
      console.log('‚ùå Erreur r√©cup√©ration politiques:', policyError);
    } else {
      console.log(`‚úÖ Politiques trouv√©es: ${policies?.length || 0}`);
    }

    // √âTAPE 6: Test de mise √† jour manuelle
    console.log('\nüìã √âTAPE 6: Test de mise √† jour manuelle...');
    
    const manualUpdateAmount = 2;
    const { error: manualError } = await supabase
      .from('users')
      .update({ 
        balance: testUser.balance + manualUpdateAmount,
        updated_at: new Date().toISOString()
      })
      .eq('id', testUser.id);

    if (manualError) {
      console.log('‚ùå Erreur mise √† jour manuelle:', manualError);
      console.log('   Code:', manualError.code);
      console.log('   Message:', manualError.message);
    } else {
      console.log('‚úÖ Mise √† jour manuelle r√©ussie');
      
      // V√©rifier la mise √† jour manuelle
      const { data: manualCheck } = await supabase
        .from('users')
        .select('balance, updated_at')
        .eq('id', testUser.id)
        .single();

      console.log(`   Nouveau solde: ${manualCheck?.balance} MAD`);
      console.log(`   Timestamp: ${new Date(manualCheck?.updated_at).toLocaleString()}`);
    }

    // √âTAPE 7: Analyser le probl√®me
    console.log('\nüéØ DIAGNOSTIC FINAL:');
    console.log('   Si la transaction simple ne met pas √† jour le solde:');
    console.log('   1. Le trigger n\'existe pas ou est inactif');
    console.log('   2. La fonction de trigger a une erreur');
    console.log('   3. Les politiques RLS bloquent la mise √† jour');
    console.log('   4. Il y a un conflit dans la logique de trigger');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le diagnostic
debugBalanceUpdate();
