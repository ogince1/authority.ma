import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://lqldqgbpaxqaazfjzlsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxbGRxZ2JwYXhxYWF6Zmp6bHN6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU2NDE5MSwiZXhwIjoyMDY5MTQwMTkxfQ.rVOMDNv6DVaAq3202AcAacXaM2-hGqppyeI617eWieI';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç DEBUG: V√©rification du trigger de mise √† jour des soldes\n');

async function debugTriggerIssue() {
  try {
    // R√©cup√©rer l'annonceur et l'√©diteur
    const { data: advertiser } = await supabase
      .from('users')
      .select('id, email, balance, updated_at')
      .eq('email', 'abderrahimmolatefpro@gmail.com')
      .single();

    const { data: publisher } = await supabase
      .from('users')
      .select('id, email, balance, updated_at')
      .eq('email', 'ogincema@gmail.com')
      .single();

    if (!advertiser || !publisher) {
      console.log('‚ùå Impossible de trouver les utilisateurs');
      return;
    }

    console.log(`üéØ Annonceur: ${advertiser.email}`);
    console.log(`   Solde actuel: ${advertiser.balance} MAD`);
    console.log(`   Derni√®re mise √† jour: ${new Date(advertiser.updated_at).toLocaleString()}`);

    console.log(`üéØ √âditeur: ${publisher.email}`);
    console.log(`   Solde actuel: ${publisher.balance} MAD`);
    console.log(`   Derni√®re mise √† jour: ${new Date(publisher.updated_at).toLocaleString()}`);

    // TEST 1: Cr√©er une transaction de cr√©dit et voir si le trigger fonctionne
    console.log('\nüìã TEST 1: Cr√©ation d\'une transaction de cr√©dit...');
    
    const testAmount = 10;
    const { data: creditTransaction, error: creditError } = await supabase
      .from('credit_transactions')
      .insert({
        user_id: publisher.id,
        type: 'deposit',
        amount: testAmount,
        description: 'Test trigger debug',
        currency: 'MAD',
        status: 'completed',
        created_at: new Date().toISOString(),
        completed_at: new Date().toISOString()
      })
      .select()
      .single();

    if (creditError) {
      console.log('‚ùå Erreur cr√©ation transaction de cr√©dit:', creditError);
      console.log('   Code:', creditError.code);
      console.log('   Message:', creditError.message);
      console.log('   D√©tails:', creditError.details);
      return;
    }

    console.log(`‚úÖ Transaction de cr√©dit cr√©√©e: ${creditTransaction.id.slice(0, 8)}...`);
    console.log(`   Type: ${creditTransaction.type}`);
    console.log(`   Montant: ${creditTransaction.amount} MAD`);
    console.log(`   Solde avant: ${creditTransaction.balance_before} MAD`);
    console.log(`   Solde apr√®s: ${creditTransaction.balance_after} MAD`);

    // Attendre un peu pour que le trigger se d√©clenche
    console.log('\n‚è≥ Attente de 3 secondes pour que le trigger se d√©clenche...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    // V√©rifier si le solde a √©t√© mis √† jour
    console.log('\nüìã V√âRIFICATION DU SOLDE APR√àS LE TRIGGER:');
    
    const { data: updatedPublisher } = await supabase
      .from('users')
      .select('balance, updated_at')
      .eq('id', publisher.id)
      .single();

    console.log(`   Solde √©diteur avant: ${publisher.balance} MAD`);
    console.log(`   Solde √©diteur apr√®s: ${updatedPublisher?.balance} MAD`);
    console.log(`   Derni√®re mise √† jour: ${new Date(updatedPublisher?.updated_at).toLocaleString()}`);

    // V√©rifier si le trigger a fonctionn√©
    const expectedBalance = publisher.balance + testAmount;
    if (updatedPublisher?.balance === expectedBalance) {
      console.log(`   ‚úÖ TRIGGER FONCTIONNE ! Solde mis √† jour correctement`);
    } else {
      console.log(`   ‚ùå TRIGGER NE FONCTIONNE PAS !`);
      console.log(`   Solde attendu: ${expectedBalance} MAD`);
      console.log(`   Solde r√©el: ${updatedPublisher?.balance} MAD`);
      console.log(`   Diff√©rence: ${Math.abs((updatedPublisher?.balance || 0) - expectedBalance)} MAD`);
    }

    // TEST 2: V√©rifier les triggers existants
    console.log('\nüìã TEST 2: V√©rification des triggers existants...');
    
    // Essayer de voir les triggers via une requ√™te SQL directe
    const { data: triggerInfo, error: triggerError } = await supabase
      .rpc('get_trigger_info', { table_name: 'credit_transactions' });

    if (triggerError) {
      console.log('‚ùå Erreur r√©cup√©ration info triggers:', triggerError);
      console.log('   La fonction get_trigger_info n\'existe peut-√™tre pas');
    } else {
      console.log('‚úÖ Info triggers r√©cup√©r√©e:', triggerInfo);
    }

    // TEST 3: V√©rifier la structure de la table credit_transactions
    console.log('\nüìã TEST 3: V√©rification de la structure de la table credit_transactions...');
    
    const { data: transactions, error: transError } = await supabase
      .from('credit_transactions')
      .select('*')
      .eq('id', creditTransaction.id)
      .single();

    if (transError) {
      console.log('‚ùå Erreur r√©cup√©ration transaction:', transError);
    } else {
      console.log('‚úÖ Transaction r√©cup√©r√©e:');
      console.log(`   ID: ${transactions.id}`);
      console.log(`   User ID: ${transactions.user_id}`);
      console.log(`   Type: ${transactions.type}`);
      console.log(`   Amount: ${transactions.amount}`);
      console.log(`   Balance Before: ${transactions.balance_before}`);
      console.log(`   Balance After: ${transactions.balance_after}`);
      console.log(`   Status: ${transactions.status}`);
      console.log(`   Created At: ${new Date(transactions.created_at).toLocaleString()}`);
    }

    // TEST 4: V√©rifier si les fonctions de trigger existent
    console.log('\nüìã TEST 4: V√©rification des fonctions de trigger...');
    
    // Essayer d'appeler directement la fonction de trigger
    const { data: triggerTest, error: triggerTestError } = await supabase
      .rpc('update_user_balance_after_transaction');

    if (triggerTestError) {
      console.log('‚ùå Erreur test fonction trigger:', triggerTestError);
      console.log('   La fonction update_user_balance_after_transaction n\'existe peut-√™tre pas');
    } else {
      console.log('‚úÖ Fonction trigger test√©e:', triggerTest);
    }

    console.log('\nüéØ DIAGNOSTIC FINAL:');
    console.log('   Si le trigger ne fonctionne pas, il faut:');
    console.log('   1. V√©rifier que la fonction update_user_balance_after_transaction existe');
    console.log('   2. V√©rifier que le trigger trigger_update_user_balance_after_transaction existe');
    console.log('   3. V√©rifier que le trigger est actif');
    console.log('   4. Recr√©er le trigger si n√©cessaire');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le diagnostic
debugTriggerIssue();
