// Scripts de t√¢ches p√©riodiques pour l'application
import { autoConfirmExpiredRequests } from '../lib/supabase';

// Variable globale pour √©viter les duplications
let cronJobsStarted = false;
let cronIntervalId: NodeJS.Timeout | null = null;

// Fonction pour ex√©cuter toutes les t√¢ches cron
export const runCronJobs = async () => {
  console.log('üïê Ex√©cution des t√¢ches cron...');
  
  try {
    // 1. Confirmation automatique des liens expir√©s
    console.log('üìã V√©rification des liens expir√©s...');
    const autoConfirmationResult = await autoConfirmExpiredRequests();
    
    if (autoConfirmationResult && autoConfirmationResult.confirmed !== undefined) {
      console.log(`‚úÖ ${autoConfirmationResult.confirmed} lien(s) confirm√©(s) automatiquement`);
    } else {
      console.error('‚ùå Erreur lors de la confirmation automatique:', autoConfirmationResult);
    }
    
    // Ici on peut ajouter d'autres t√¢ches cron √† l'avenir
    // - Nettoyage des sessions expir√©es
    // - Envoi d'emails de rappel
    // - G√©n√©ration de rapports
    // - etc.
    
    console.log('‚úÖ Toutes les t√¢ches cron ont √©t√© ex√©cut√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des t√¢ches cron:', error);
  }
};

// Fonction pour programmer l'ex√©cution p√©riodique
export const startCronJobs = () => {
  // √âviter les duplications
  if (cronJobsStarted) {
    console.log('‚ö†Ô∏è T√¢ches cron d√©j√† d√©marr√©es, ignor√©');
    return cronIntervalId;
  }
  
  console.log('üöÄ D√©marrage des t√¢ches cron...');
  cronJobsStarted = true;
  
  // Ex√©cuter imm√©diatement
  runCronJobs();
  
  // Puis toutes les heures
  cronIntervalId = setInterval(() => {
    runCronJobs();
  }, 60 * 60 * 1000); // 1 heure
  
  console.log('‚è∞ T√¢ches cron programm√©es (ex√©cution toutes les heures)');
  
  // Retourner l'ID de l'intervalle pour pouvoir l'arr√™ter si n√©cessaire
  return cronIntervalId;
};

// Fonction pour arr√™ter les t√¢ches cron
export const stopCronJobs = () => {
  if (cronIntervalId) {
    clearInterval(cronIntervalId);
    cronIntervalId = null;
    cronJobsStarted = false;
    console.log('‚èπÔ∏è T√¢ches cron arr√™t√©es');
  }
};

// Fonction pour ex√©cuter une t√¢che sp√©cifique
export const runSpecificCronJob = async (jobName: string) => {
  console.log(`üîß Ex√©cution de la t√¢che: ${jobName}`);
  
  switch (jobName) {
    case 'auto-confirmation':
      const result = await autoConfirmExpiredRequests();
      console.log(`R√©sultat: ${result ? 'Succ√®s' : '√âchec'}, ${result?.confirmed || 0} √©l√©ment(s) trait√©(s)`);
      return result;
    
    default:
      console.error(`‚ùå T√¢che inconnue: ${jobName}`);
      return { success: false, error: 'T√¢che inconnue' };
  }
};
