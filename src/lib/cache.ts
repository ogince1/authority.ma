/**
 * Syst√®me de cache en m√©moire pour optimiser les performances
 * R√©duit le nombre de requ√™tes Supabase et am√©liore la r√©activit√©
 */

interface CacheEntry<T> {
  data: T;
  timestamp: number;
}

class DataCache {
  private cache = new Map<string, CacheEntry<any>>();
  private defaultTTL = 5 * 60 * 1000; // 5 minutes par d√©faut

  /**
   * R√©cup√®re une donn√©e du cache
   * @param key Cl√© du cache
   * @param ttl Dur√©e de vie en millisecondes (optionnel)
   * @returns Donn√©es ou null si expir√©es/inexistantes
   */
  get<T>(key: string, ttl: number = this.defaultTTL): T | null {
    const entry = this.cache.get(key);
    
    if (!entry) {
      console.log(`‚ùå Cache MISS: ${key}`);
      return null;
    }
    
    const age = Date.now() - entry.timestamp;
    
    if (age > ttl) {
      this.cache.delete(key);
      console.log(`‚è∞ Cache EXPIRED: ${key} (age: ${Math.round(age/1000)}s)`);
      return null;
    }
    
    console.log(`‚úÖ Cache HIT: ${key} (age: ${Math.round(age/1000)}s, ttl: ${Math.round(ttl/1000)}s)`);
    return entry.data;
  }

  /**
   * Stocke une donn√©e dans le cache
   * @param key Cl√© du cache
   * @param data Donn√©es √† stocker
   */
  set<T>(key: string, data: T): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
    console.log(`üíæ Cache SET: ${key}`);
  }

  /**
   * Invalide le cache (tout ou selon un pattern)
   * @param pattern Pattern optionnel pour invalider s√©lectivement
   */
  invalidate(pattern?: string): void {
    if (!pattern) {
      const count = this.cache.size;
      this.cache.clear();
      console.log(`üóëÔ∏è  Cache cleared (${count} entries)`);
      return;
    }

    let count = 0;
    for (const key of this.cache.keys()) {
      if (key.includes(pattern)) {
        this.cache.delete(key);
        count++;
      }
    }
    
    if (count > 0) {
      console.log(`üóëÔ∏è  Cache invalidated: ${count} entries matching '${pattern}'`);
    }
  }

  /**
   * Nettoie automatiquement les entr√©es expir√©es
   */
  private startAutoCleanup(): void {
    setInterval(() => {
      const now = Date.now();
      let cleanedCount = 0;
      
      for (const [key, entry] of this.cache.entries()) {
        if (now - entry.timestamp > this.defaultTTL) {
          this.cache.delete(key);
          cleanedCount++;
        }
      }
      
      if (cleanedCount > 0) {
        console.log(`üßπ Auto-cleanup: ${cleanedCount} expired entries removed`);
      }
    }, 10 * 60 * 1000); // Toutes les 10 minutes
  }

  /**
   * Retourne les statistiques du cache
   */
  getStats(): { size: number; keys: string[] } {
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
}

// Instance singleton
export const cache = new DataCache();

// D√©marrer le nettoyage automatique
if (typeof window !== 'undefined') {
  (cache as any).startAutoCleanup();
}

// Exposer dans window pour debug
if (typeof window !== 'undefined') {
  (window as any).dataCache = cache;
  console.log('üíæ Data cache initialized. Use window.dataCache.getStats() to inspect.');
}
