import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://lqldqgbpaxqaazfjzlsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxbGRxZ2JwYXhxYWF6Zmp6bHN6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU2NDE5MSwiZXhwIjoyMDY5MTQwMTkxfQ.rVOMDNv6DVaAq3202AcAacXaM2-hGqppyeI617eWieI';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üß™ TEST: Cr√©er une demande et tester le processus complet\n');

async function createAndTestReal() {
  try {
    // R√©cup√©rer les utilisateurs
    const { data: advertiser } = await supabase
      .from('users')
      .select('id, email, balance')
      .eq('email', 'abderrahimmolatefpro@gmail.com')
      .single();

    const { data: publisher } = await supabase
      .from('users')
      .select('id, email, balance')
      .eq('email', 'ogincema@gmail.com')
      .single();

    if (!advertiser || !publisher) {
      console.log('‚ùå Utilisateurs non trouv√©s');
      return;
    }

    console.log(`üéØ SOLDES INITIAUX:`);
    console.log(`   Annonceur (${advertiser.email}): ${advertiser.balance} MAD`);
    console.log(`   √âditeur (${publisher.email}): ${publisher.balance} MAD`);

    // R√©cup√©rer un lien existant
    const { data: existingLink } = await supabase
      .from('link_listings')
      .select('id, title')
      .eq('status', 'active')
      .limit(1)
      .single();

    if (!existingLink) {
      console.log('‚ùå Aucun lien existant trouv√©');
      return;
    }

    // √âTAPE 1: Cr√©er une demande d'achat
    console.log('\nüìã √âTAPE 1: Cr√©ation d\'une demande d\'achat...');
    
    const { data: purchaseRequest, error: requestError } = await supabase
      .from('link_purchase_requests')
      .insert({
        link_listing_id: existingLink.id,
        user_id: advertiser.id,
        publisher_id: publisher.id,
        target_url: 'https://test-create-and-test.com',
        anchor_text: 'Test cr√©ation et test',
        proposed_price: 25,
        proposed_duration: 1,
        status: 'pending',
        message: 'Test complet du processus'
      })
      .select()
      .single();

    if (requestError) {
      console.log('‚ùå Erreur cr√©ation demande:', requestError);
      return;
    }

    console.log(`‚úÖ Demande cr√©√©e: ${purchaseRequest.id.slice(0, 8)}...`);

    // √âTAPE 2: Accepter la demande (comme le ferait l'√©diteur)
    console.log('\nüìã √âTAPE 2: Acceptation de la demande par l\'√©diteur...');
    
    const { error: acceptError } = await supabase
      .from('link_purchase_requests')
      .update({
        status: 'pending_confirmation',
        accepted_at: new Date().toISOString(),
        response_date: new Date().toISOString(),
        placed_url: 'https://test-placement-create-and-test.com',
        placed_at: new Date().toISOString(),
        editor_response: 'Demande accept√©e pour test complet'
      })
      .eq('id', purchaseRequest.id);

    if (acceptError) {
      console.log('‚ùå Erreur acceptation demande:', acceptError);
      return;
    }

    console.log(`‚úÖ Demande accept√©e et en attente de confirmation`);

    // √âTAPE 3: Confirmation EXACTE comme dans le frontend
    console.log('\nüìã √âTAPE 3: Confirmation EXACTE comme dans le frontend...');
    
    // Calculer les montants
    const platformFee = purchaseRequest.proposed_price * 0.10;
    const publisherAmount = purchaseRequest.proposed_price - platformFee;

    console.log(`üí∞ Calculs:`);
    console.log(`   Prix total: ${purchaseRequest.proposed_price} MAD`);
    console.log(`   Commission: ${platformFee} MAD`);
    console.log(`   Montant √©diteur: ${publisherAmount} MAD`);

    // Cr√©er la transaction d'achat
    const { data: transaction, error: transactionError } = await supabase
      .from('link_purchase_transactions')
      .insert({
        purchase_request_id: purchaseRequest.id,
        advertiser_id: advertiser.id,
        publisher_id: publisher.id,
        link_listing_id: purchaseRequest.link_listing_id,
        amount: purchaseRequest.proposed_price,
        platform_fee: platformFee,
        publisher_amount: publisherAmount,
        status: 'completed',
        payment_method: 'balance'
      })
      .select()
      .single();

    if (transactionError) {
      console.log('‚ùå Erreur cr√©ation transaction:', transactionError);
      return;
    }

    console.log(`‚úÖ Transaction d'achat cr√©√©e: ${transaction.id.slice(0, 8)}...`);

    // Cr√©er les transactions de cr√©dit EXACTEMENT comme dans le frontend
    console.log(`üí≥ Cr√©ation des transactions de cr√©dit...`);
    
    const { data: creditTransactions, error: creditTransactionError } = await supabase
      .from('credit_transactions')
      .insert([
        {
          user_id: advertiser.id,
          type: 'purchase',
          amount: purchaseRequest.proposed_price,
          description: 'Achat de lien',
          currency: 'MAD',
          status: 'completed',
          balance_before: advertiser.balance,
          balance_after: advertiser.balance - purchaseRequest.proposed_price,
          related_link_listing_id: purchaseRequest.link_listing_id,
          related_purchase_request_id: purchaseRequest.id,
          created_at: new Date().toISOString(),
          completed_at: new Date().toISOString()
        },
        {
          user_id: publisher.id,
          type: 'deposit',
          amount: publisherAmount,
          description: 'Vente de lien',
          currency: 'MAD',
          status: 'completed',
          balance_before: publisher.balance,
          balance_after: publisher.balance + publisherAmount,
          related_link_listing_id: purchaseRequest.link_listing_id,
          related_purchase_request_id: purchaseRequest.id,
          created_at: new Date().toISOString(),
          completed_at: new Date().toISOString()
        }
      ])
      .select();

    if (creditTransactionError) {
      console.log('‚ùå Erreur cr√©ation transactions de cr√©dit:', creditTransactionError);
      console.log('   Code:', creditTransactionError.code);
      console.log('   Message:', creditTransactionError.message);
      console.log('   D√©tails:', creditTransactionError.details);
      return;
    }

    console.log(`‚úÖ Transactions de cr√©dit cr√©√©es: ${creditTransactions?.length || 0}`);
    
    creditTransactions?.forEach((trans, index) => {
      const userType = trans.user_id === advertiser.id ? 'Annonceur' : '√âditeur';
      console.log(`   ${index + 1}. ${userType}: ${trans.type} ${trans.amount} MAD`);
      console.log(`      Balance before: ${trans.balance_before} MAD`);
      console.log(`      Balance after: ${trans.balance_after} MAD`);
    });

    // Mettre √† jour le statut de la demande
    const { error: updateError } = await supabase
      .from('link_purchase_requests')
      .update({
        status: 'confirmed',
        confirmed_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', purchaseRequest.id)
      .eq('status', 'pending_confirmation');

    if (updateError) {
      console.log(`‚ùå Erreur mise √† jour statut: ${updateError.message}`);
      return;
    }

    console.log(`‚úÖ Statut mis √† jour: confirmed`);

    // √âTAPE 4: V√©rification imm√©diate des soldes dans la table users
    console.log('\nüìã √âTAPE 4: V√©rification IMM√âDIATE des soldes dans la table users...');
    
    const { data: advertiserImmediate } = await supabase
      .from('users')
      .select('balance, updated_at')
      .eq('id', advertiser.id)
      .single();

    const { data: publisherImmediate } = await supabase
      .from('users')
      .select('balance, updated_at')
      .eq('id', publisher.id)
      .single();

    console.log(`üìä SOLDES IMM√âDIATS (0 seconde d'attente):`);
    console.log(`   Annonceur: ${advertiser.balance} ‚Üí ${advertiserImmediate?.balance} MAD`);
    console.log(`   √âditeur: ${publisher.balance} ‚Üí ${publisherImmediate?.balance} MAD`);

    // √âTAPE 5: V√©rification apr√®s 3 secondes
    console.log('\nüìã √âTAPE 5: V√©rification apr√®s 3 secondes...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const { data: advertiserDelayed } = await supabase
      .from('users')
      .select('balance, updated_at')
      .eq('id', advertiser.id)
      .single();

    const { data: publisherDelayed } = await supabase
      .from('users')
      .select('balance, updated_at')
      .eq('id', publisher.id)
      .single();

    console.log(`üìä SOLDES APR√àS 3 SECONDES:`);
    console.log(`   Annonceur: ${advertiser.balance} ‚Üí ${advertiserDelayed?.balance} MAD`);
    console.log(`   √âditeur: ${publisher.balance} ‚Üí ${publisherDelayed?.balance} MAD`);

    // √âTAPE 6: Analyse finale
    console.log('\nüìã √âTAPE 6: Analyse finale...');
    
    const expectedAdvertiserBalance = advertiser.balance - purchaseRequest.proposed_price;
    const expectedPublisherBalance = publisher.balance + publisherAmount;

    console.log(`üîç ATTENDU:`);
    console.log(`   Annonceur: ${expectedAdvertiserBalance} MAD`);
    console.log(`   √âditeur: ${expectedPublisherBalance} MAD`);

    console.log(`üîç R√âEL (apr√®s 3 secondes):`);
    console.log(`   Annonceur: ${advertiserDelayed?.balance} MAD`);
    console.log(`   √âditeur: ${publisherDelayed?.balance} MAD`);

    // V√©rification finale
    if (advertiserDelayed?.balance === expectedAdvertiserBalance) {
      console.log(`   ‚úÖ ANNONCEUR: TRIGGER FONCTIONNE !`);
    } else {
      console.log(`   ‚ùå ANNONCEUR: TRIGGER NE FONCTIONNE PAS !`);
    }

    if (publisherDelayed?.balance === expectedPublisherBalance) {
      console.log(`   ‚úÖ √âDITEUR: TRIGGER FONCTIONNE !`);
    } else {
      console.log(`   ‚ùå √âDITEUR: TRIGGER NE FONCTIONNE PAS !`);
      console.log(`   Diff√©rence: ${Math.abs((publisherDelayed?.balance || 0) - expectedPublisherBalance)} MAD`);
    }

    console.log('\nüéØ CONCLUSION:');
    if (advertiserDelayed?.balance === expectedAdvertiserBalance && publisherDelayed?.balance === expectedPublisherBalance) {
      console.log('   ‚úÖ LES TRIGGERS FONCTIONNENT PARFAITEMENT !');
      console.log('   Le probl√®me que vous voyez doit √™tre ailleurs');
    } else {
      console.log('   ‚ùå IL Y A UN VRAI PROBL√àME AVEC LES TRIGGERS !');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le test
createAndTestReal();
