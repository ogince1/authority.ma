// Script pour d√©boguer l'erreur de processus d'achat
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function debugPurchaseError() {
  console.log('üîç D√âBOGAGE DE L\'ERREUR DE PROCESSUS D\'ACHAT');
  console.log('==============================================\n');
  
  // Analyser l'erreur
  console.log('‚ùå ERREUR D√âTECT√âE:');
  console.log('Code: 23503 (Foreign Key Constraint)');
  console.log('Message: Key is not present in table "users"');
  console.log('Table: link_purchase_requests');
  console.log('Contrainte: link_purchase_requests_publisher_id_fkey');
  console.log('Publisher ID probl√©matique: 875c1fbd-7353-4a0d-b36c-217fc8827cc3\n');
  
  // V√©rifier les utilisateurs existants
  console.log('üë• V√âRIFICATION DES UTILISATEURS:');
  try {
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*');
    
    if (usersError) {
      console.log('‚ùå Erreur r√©cup√©ration utilisateurs:', usersError.message);
    } else {
      console.log('‚úÖ Utilisateurs trouv√©s:', users.length);
      users.forEach((user, index) => {
        console.log(`   ${index + 1}. ID: ${user.id}`);
        console.log(`      Nom: ${user.name}`);
        console.log(`      Email: ${user.email}`);
        console.log(`      R√¥le: ${user.role}`);
        console.log('');
      });
    }
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
  
  // V√©rifier les annonces de liens
  console.log('üîó V√âRIFICATION DES ANNONCES DE LIENS:');
  try {
    const { data: listings, error: listingsError } = await supabase
      .from('link_listings')
      .select('*');
    
    if (listingsError) {
      console.log('‚ùå Erreur r√©cup√©ration annonces:', listingsError.message);
    } else {
      console.log('‚úÖ Annonces trouv√©es:', listings.length);
      listings.forEach((listing, index) => {
        console.log(`   ${index + 1}. ID: ${listing.id}`);
        console.log(`      Titre: ${listing.title}`);
        console.log(`      User ID: ${listing.user_id}`);
        console.log(`      Prix: ${listing.price} ${listing.currency}`);
        console.log('');
      });
    }
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
  
  // V√©rifier les demandes d'achat existantes
  console.log('üìù V√âRIFICATION DES DEMANDES D\'ACHAT:');
  try {
    const { data: requests, error: requestsError } = await supabase
      .from('link_purchase_requests')
      .select('*');
    
    if (requestsError) {
      console.log('‚ùå Erreur r√©cup√©ration demandes:', requestsError.message);
    } else {
      console.log('‚úÖ Demandes trouv√©es:', requests.length);
      requests.forEach((request, index) => {
        console.log(`   ${index + 1}. ID: ${request.id}`);
        console.log(`      Annonceur: ${request.user_id}`);
        console.log(`      √âditeur: ${request.publisher_id}`);
        console.log(`      Prix: ${request.proposed_price} MAD`);
        console.log(`      Statut: ${request.status}`);
        console.log('');
      });
    }
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
  
  // V√©rifier l'utilisateur actuel
  console.log('üîç V√âRIFICATION DE L\'UTILISATEUR ACTUEL:');
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      console.log('‚úÖ Utilisateur connect√©:');
      console.log(`   ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   Nom: ${user.user_metadata?.name || 'N/A'}`);
      console.log(`   R√¥le: ${user.user_metadata?.role || 'N/A'}`);
      
      // V√©rifier si le profil existe dans la table users
      const { data: profile, error: profileError } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single();
      
      if (profileError) {
        console.log('‚ùå Profil non trouv√© dans la table users:', profileError.message);
      } else {
        console.log('‚úÖ Profil trouv√© dans la table users');
        console.log(`   Solde: ${profile.balance} MAD`);
      }
    } else {
      console.log('‚ùå Aucun utilisateur connect√©');
    }
  } catch (error) {
    console.log('‚ùå Erreur v√©rification utilisateur:', error.message);
  }
  
  // Analyser le probl√®me sp√©cifique
  console.log('üîß ANALYSE DU PROBL√àME:');
  console.log('========================');
  console.log('Le probl√®me vient du fait que:');
  console.log('1. L\'annonce de lien a un user_id: 875c1fbd-7353-4a0d-b36c-217fc8827cc3');
  console.log('2. Ce user_id est utilis√© comme publisher_id dans la demande d\'achat');
  console.log('3. Mais cet utilisateur n\'existe pas dans la table users');
  console.log('4. La contrainte de cl√© √©trang√®re √©choue');
  
  console.log('\nüí° SOLUTIONS POSSIBLES:');
  console.log('=======================');
  console.log('1. Cr√©er l\'utilisateur manquant dans la table users');
  console.log('2. Modifier l\'annonce pour utiliser un user_id existant');
  console.log('3. Corriger la logique de cr√©ation des demandes d\'achat');
  console.log('4. V√©rifier les politiques RLS sur la table users');
}

debugPurchaseError();
