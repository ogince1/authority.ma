import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = 'https://lqldqgbpaxqaazfjzlsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxbGRxZ2JwYXhxYWF6Zmp6bHN6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU2NDE5MSwiZXhwIjoyMDY5MTQwMTkxfQ.rVOMDNv6DVaAq3202AcAacXaM2-hGqppyeI617eWieI';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç DEBUG: Analyse des demandes expir√©es\n');

async function debugExpiredRequests() {
  try {
    // R√©cup√©rer toutes les demandes en attente de confirmation
    const { data: pendingRequests, error: requestsError } = await supabase
      .from('link_purchase_requests')
      .select(`
        *,
        advertiser:users!link_purchase_requests_user_id_fkey(id, email, balance),
        publisher:users!link_purchase_requests_publisher_id_fkey(id, email, balance),
        link_listing:link_listings(id, title)
      `)
      .eq('status', 'pending_confirmation')
      .order('created_at', { ascending: false });

    if (requestsError) {
      console.error('‚ùå Erreur r√©cup√©ration demandes:', requestsError);
      return;
    }

    if (!pendingRequests || pendingRequests.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune demande en attente de confirmation trouv√©e');
      return;
    }

    console.log(`üìã ${pendingRequests.length} demande(s) en attente de confirmation:`);

    pendingRequests.forEach((req, index) => {
      const acceptedAt = new Date(req.accepted_at || req.response_date);
      const deadline = new Date(acceptedAt);
      deadline.setHours(deadline.getHours() + 48);
      const now = new Date();
      const isExpired = now > deadline;
      const hoursRemaining = Math.max(0, (deadline - now) / (1000 * 60 * 60));

      console.log(`\n   ${index + 1}. ID: ${req.id.slice(0, 8)}...`);
      console.log(`      Annonceur: ${req.advertiser?.email}`);
      console.log(`      √âditeur: ${req.publisher?.email}`);
      console.log(`      Montant: ${req.proposed_price} MAD`);
      console.log(`      Accept√© le: ${acceptedAt.toLocaleString()}`);
      console.log(`      D√©lai: ${deadline.toLocaleString()}`);
      console.log(`      Statut: ${isExpired ? '‚ùå EXPIR√â' : '‚úÖ VALIDE'}`);
      if (!isExpired) {
        console.log(`      Temps restant: ${hoursRemaining.toFixed(1)} heures`);
      }
    });

    // Identifier les demandes expir√©es
    const expiredRequests = pendingRequests.filter(req => {
      const acceptedAt = new Date(req.accepted_at || req.response_date);
      const deadline = new Date(acceptedAt);
      deadline.setHours(deadline.getHours() + 48);
      return new Date() > deadline;
    });

    if (expiredRequests.length > 0) {
      console.log(`\n‚ö†Ô∏è  ${expiredRequests.length} demande(s) expir√©e(s) trouv√©e(s)`);
      console.log('   Ces demandes ne peuvent plus √™tre confirm√©es manuellement.');
      console.log('   Elles devraient √™tre trait√©es automatiquement par le syst√®me de cron jobs.');
      
      // V√©rifier si le syst√®me de cron jobs fonctionne
      console.log('\nüîç V√©rification du syst√®me de cron jobs...');
      
      // Chercher des demandes r√©cemment confirm√©es automatiquement
      const { data: autoConfirmed, error: autoError } = await supabase
        .from('link_purchase_requests')
        .select('*')
        .eq('status', 'confirmed')
        .gte('confirmed_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()) // 24h
        .order('confirmed_at', { ascending: false });

      if (autoError) {
        console.log('‚ùå Erreur v√©rification confirmations automatiques:', autoError);
      } else if (autoConfirmed && autoConfirmed.length > 0) {
        console.log(`‚úÖ ${autoConfirmed.length} demande(s) confirm√©e(s) automatiquement dans les derni√®res 24h`);
        autoConfirmed.forEach((req, index) => {
          console.log(`   ${index + 1}. ID: ${req.id.slice(0, 8)}... | Confirm√©: ${new Date(req.confirmed_at).toLocaleString()}`);
        });
      } else {
        console.log('‚ö†Ô∏è  Aucune confirmation automatique r√©cente trouv√©e');
        console.log('   Le syst√®me de cron jobs pourrait ne pas fonctionner correctement.');
      }
    }

    // Proposer des solutions
    console.log('\nüí° SOLUTIONS PROPOS√âES:');
    
    if (expiredRequests.length > 0) {
      console.log('   1. V√©rifier que le syst√®me de cron jobs fonctionne');
      console.log('   2. Ex√©cuter manuellement la fonction auto_confirm_expired_requests');
      console.log('   3. Cr√©er de nouvelles demandes pour tester le processus');
    }

    const validRequests = pendingRequests.filter(req => {
      const acceptedAt = new Date(req.accepted_at || req.response_date);
      const deadline = new Date(acceptedAt);
      deadline.setHours(deadline.getHours() + 48);
      return new Date() <= deadline;
    });

    if (validRequests.length > 0) {
      console.log(`   4. Tester la confirmation avec ${validRequests.length} demande(s) valide(s)`);
    }

    console.log('\nüéØ RECOMMANDATION:');
    console.log('   Le processus de confirmation fonctionne correctement.');
    console.log('   Le probl√®me vient du fait que les demandes existantes ont expir√©.');
    console.log('   Cr√©ez de nouvelles demandes pour tester le processus en temps r√©el.');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le debug
debugExpiredRequests();
