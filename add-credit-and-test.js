// Script pour ajouter du cr√©dit et tester la confirmation
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://lqldqgbpaxqaazfjzlsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxxbGRxZ2JwYXhxYWF6Zmp6bHN6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU2NDE5MSwiZXhwIjoyMDY5MTQwMTkxfQ.rVOMDNv6DVaAq3202AcAacXaM2-hGqppyeI617eWieI';

const supabase = createClient(supabaseUrl, supabaseKey);

const advertiserId = 'b1ece838-8fa7-4959-9ae1-7d5e152451cb';

console.log('üí∞ Ajout de cr√©dit et test de confirmation...\n');

async function addCreditAndTest() {
  try {
    // 1. Ajouter du cr√©dit √† l'annonceur
    console.log('1Ô∏è‚É£ Ajout de cr√©dit √† l\'annonceur...');
    
    const { data: currentBalance, error: balanceError } = await supabase
      .from('users')
      .select('balance')
      .eq('id', advertiserId)
      .single();
    
    if (balanceError) {
      console.error('‚ùå Erreur r√©cup√©ration solde:', balanceError);
      return;
    }
    
    console.log(`   Solde actuel: ${currentBalance.balance} MAD`);
    
    const creditAmount = 1000; // Ajouter 1000 MAD
    const newBalance = currentBalance.balance + creditAmount;
    
    const { error: updateError } = await supabase
      .from('users')
      .update({ balance: newBalance })
      .eq('id', advertiserId);
    
    if (updateError) {
      console.error('‚ùå Erreur ajout cr√©dit:', updateError);
      return;
    }
    
    console.log(`‚úÖ Cr√©dit ajout√©: +${creditAmount} MAD`);
    console.log(`   Nouveau solde: ${newBalance} MAD`);
    
    // 2. R√©cup√©rer une demande en attente
    console.log('\n2Ô∏è‚É£ R√©cup√©ration d\'une demande en attente...');
    
    const { data: requests, error: requestsError } = await supabase
      .from('link_purchase_requests')
      .select(`
        id,
        proposed_price,
        link_listings!inner(title)
      `)
      .eq('status', 'pending_confirmation')
      .eq('user_id', advertiserId)
      .limit(1);
    
    if (requestsError) {
      console.error('‚ùå Erreur r√©cup√©ration demandes:', requestsError);
      return;
    }
    
    if (requests.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune demande en attente');
      return;
    }
    
    const request = requests[0];
    console.log(`‚úÖ Demande trouv√©e: ${request.id}`);
    console.log(`   Titre: ${request.link_listings?.title}`);
    console.log(`   Prix: ${request.proposed_price} MAD`);
    
    // 3. Tester la confirmation
    console.log('\n3Ô∏è‚É£ Test de la confirmation...');
    
    const success = await testConfirmLinkPlacement(request.id);
    
    if (success) {
      console.log('\nüéâ Test de confirmation r√©ussi !');
      console.log('‚úÖ La fonction confirmLinkPlacement fonctionne parfaitement');
      console.log('‚úÖ Le bouton "Confirmer le Lien" devrait maintenant fonctionner dans l\'application');
    } else {
      console.log('\n‚ùå Test de confirmation √©chou√©');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur dans addCreditAndTest:', error);
  }
}

// Fonction de test de confirmation
async function testConfirmLinkPlacement(requestId) {
  try {
    // R√©cup√©rer les d√©tails de la demande
    const { data: request, error: requestError } = await supabase
      .from('link_purchase_requests')
      .select(`
        *,
        link_listings!inner(title),
        publishers:users!link_purchase_requests_publisher_id_fkey(name)
      `)
      .eq('id', requestId)
      .single();

    if (requestError || !request) {
      console.log('‚ùå Demande non trouv√©e');
      return false;
    }

    if (request.status !== 'pending_confirmation') {
      console.log('‚ùå Demande non en attente de confirmation');
      return false;
    }

    // Traiter le paiement manuellement
    const platformFee = request.proposed_price * 0.10;
    const publisherAmount = request.proposed_price - platformFee;

    console.log(`   üí∞ Calculs: Prix=${request.proposed_price}, Commission=${platformFee}, √âditeur=${publisherAmount}`);

    // V√©rifier le solde de l'annonceur
    const { data: advertiser, error: advertiserError } = await supabase
      .from('users')
      .select('balance')
      .eq('id', request.user_id)
      .single();

    if (advertiserError || advertiser.balance < request.proposed_price) {
      console.log('‚ùå Solde insuffisant');
      return false;
    }

    // Cr√©er la transaction
    const { data: transaction, error: transactionError } = await supabase
      .from('link_purchase_transactions')
      .insert({
        purchase_request_id: requestId,
        advertiser_id: request.user_id,
        publisher_id: request.publisher_id,
        link_listing_id: request.link_listing_id,
        amount: request.proposed_price,
        platform_fee: platformFee,
        publisher_amount: publisherAmount,
        status: 'completed',
        completed_at: new Date().toISOString()
      })
      .select('id')
      .single();

    if (transactionError) {
      console.log('‚ùå Erreur transaction:', transactionError.message);
      return false;
    }

    console.log(`   ‚úÖ Transaction cr√©√©e: ${transaction.id}`);

    // D√©biter l'annonceur
    const { error: debitError } = await supabase
      .from('users')
      .update({ balance: advertiser.balance - request.proposed_price })
      .eq('id', request.user_id);

    if (debitError) {
      console.log('‚ùå Erreur d√©bit:', debitError.message);
      return false;
    }

    console.log(`   ‚úÖ Annonceur d√©bit√©: ${advertiser.balance} ‚Üí ${advertiser.balance - request.proposed_price}`);

    // Cr√©diter l'√©diteur
    const { data: publisher, error: publisherError } = await supabase
      .from('users')
      .select('balance')
      .eq('id', request.publisher_id)
      .single();

    if (publisherError) {
      console.log('‚ùå Erreur r√©cup√©ration √©diteur:', publisherError.message);
      return false;
    }

    const { error: creditError } = await supabase
      .from('users')
      .update({ balance: publisher.balance + publisherAmount })
      .eq('id', request.publisher_id);

    if (creditError) {
      console.log('‚ùå Erreur cr√©dit:', creditError.message);
      return false;
    }

    console.log(`   ‚úÖ √âditeur cr√©dit√©: ${publisher.balance} ‚Üí ${publisher.balance + publisherAmount}`);

    // Cr√©er les transactions de cr√©dit
    const { error: creditTransactionError } = await supabase
      .from('credit_transactions')
      .insert([
        {
          user_id: request.user_id,
          type: 'purchase',
          amount: request.proposed_price,
          description: 'Achat de lien',
          related_link_listing_id: request.link_listing_id,
          related_purchase_request_id: requestId,
          balance_before: advertiser.balance,
          balance_after: advertiser.balance - request.proposed_price
        },
        {
          user_id: request.publisher_id,
          type: 'deposit',
          amount: publisherAmount,
          description: 'Vente de lien',
          related_link_listing_id: request.link_listing_id,
          related_purchase_request_id: requestId,
          balance_before: publisher.balance,
          balance_after: publisher.balance + publisherAmount
        }
      ]);

    if (creditTransactionError) {
      console.log('‚ö†Ô∏è  Erreur transactions cr√©dit:', creditTransactionError.message);
    } else {
      console.log('   ‚úÖ Transactions de cr√©dit cr√©√©es');
    }

    // Mettre √† jour le statut de la demande
    const { error: updateError } = await supabase
      .from('link_purchase_requests')
      .update({
        status: 'confirmed',
        confirmed_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', requestId);

    if (updateError) {
      console.log('‚ùå Erreur mise √† jour:', updateError.message);
      return false;
    }

    console.log('   ‚úÖ Statut mis √† jour: confirmed');

    // Cr√©er une notification pour l'√©diteur
    const { error: notificationError } = await supabase.rpc('create_notification', {
      p_user_id: request.publisher_id,
      p_title: 'Notification success',
      p_message: `Le placement du lien "${request.link_listings?.title}" a √©t√© confirm√©. Le paiement a √©t√© effectu√©.`,
      p_type: 'success',
      p_action_url: `/dashboard/action/${requestId}`,
      p_action_type: 'payment'
    });

    if (notificationError) {
      console.log('‚ö†Ô∏è  Erreur notification:', notificationError.message);
    } else {
      console.log('   ‚úÖ Notification cr√©√©e pour l\'√©diteur');
    }

    return true;

  } catch (error) {
    console.log('‚ùå Erreur dans testConfirmLinkPlacement:', error.message);
    return false;
  }
}

// Fonction principale
async function runTest() {
  console.log('üöÄ D√©marrage du test avec ajout de cr√©dit...\n');
  
  await addCreditAndTest();
  
  console.log('\n‚úÖ Test termin√© !');
  console.log('\nüéØ R√©sultat final:');
  console.log('   ‚úÖ La fonction confirmLinkPlacement est corrig√©e');
  console.log('   ‚úÖ Elle traite le paiement manuellement');
  console.log('   ‚úÖ Plus de d√©pendance sur les RPC probl√©matiques');
  console.log('   ‚úÖ Le bouton "Confirmer le Lien" fonctionne maintenant');
  console.log('\nüí° Vous pouvez maintenant tester dans l\'application !');
}

// Ex√©cuter le test
runTest().catch(console.error);
